/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ThemeVariants } from "./store/ApplicationStore";
import { ButtonVariant } from "./components/Button/Button";
import { LocalJSX as JSX } from "./stencil-public-runtime";
import { InputType } from "./components/Input/Input";
import { MediaData } from "./store/RendleyStore";
import { PaperDirection } from "./components/Paper/Paper";
import { SelectVariant } from "./components/Select/Select";
import { TextBlock } from "@rendley/sdk";
import { TitleDescription } from "./config/config";
export { ThemeVariants } from "./store/ApplicationStore";
export { ButtonVariant } from "./components/Button/Button";
export { LocalJSX as JSX } from "./stencil-public-runtime";
export { InputType } from "./components/Input/Input";
export { MediaData } from "./store/RendleyStore";
export { PaperDirection } from "./components/Paper/Paper";
export { SelectVariant } from "./components/Select/Select";
export { TextBlock } from "@rendley/sdk";
export { TitleDescription } from "./config/config";
export namespace Components {
    interface RendleyVideoEditor {
        "effectsPath"?: string;
        "filtersPath"?: string;
        "getElement": () => Promise<HTMLElement | undefined>;
        "getEngine": () => Promise<typeof Engine>;
        "giphyapikey"?: string;
        "licensekey"?: string;
        "licensename"?: string;
        "pexelsapikey"?: string;
        "subtitlesStylesPath"?: string;
        "theme"?: ThemeVariants;
        "titlesPath"?: string;
        "transitionsPath"?: string;
    }
    interface VeApplyNoneCard {
    }
    interface VeAspectRatioForm {
        "onClose"?: () => void;
        "onSubmitAspectRatio"?: (width: number, height: number) => void;
    }
    interface VeAspectRatioSelector {
    }
    interface VeAudioClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeBtn {
        "class"?: string;
        "disabled"?: boolean;
        "variant": ButtonVariant;
    }
    interface VeBtnGroup {
        "label"?: string;
    }
    interface VeCanvasTimeRuler {
    }
    interface VeCardLoadingOverlay {
    }
    interface VeClip {
        "clipId": string;
        "filename"?: string;
        "isResizeEnabled"?: boolean;
        "layerId": string;
        "thumbnail"?: string;
    }
    interface VeColorInput {
        "color"?: string;
        "label"?: string;
        "onChangeColor"?: (color: string) => void;
    }
    interface VeColorPicker {
        "color"?: string;
        "onChangeColor"?: (color: string) => void;
    }
    interface VeComposition {
    }
    interface VeConfigurationPanel {
        "title"?: string;
    }
    interface VeContextMenu {
    }
    interface VeControls {
    }
    interface VeDragDropOverlay {
    }
    interface VeDragResizeRotateContainer {
    }
    interface VeDraggable {
        "isDraggable": boolean;
        "onDragEnd"?: (event: DragEvent) => void;
        "onDragStart"?: (event: DragEvent) => void;
        "payload"?: object;
    }
    interface VeEditLottiePanel {
        "clipId": string;
    }
    interface VeEditPanelContainer {
        "onClose"?: () => void;
    }
    interface VeEditTextPanel {
        "clipId": string;
    }
    interface VeEffectShowcaseCard {
        "imageUrl"?: string;
        "isSelected"?: boolean;
        "name"?: string;
        "onDelete"?: () => void;
        "onMouseDown"?: (event: MouseEvent) => Promise<unknown> | void;
        "tooltip"?: string;
        "videoUrl"?: string;
    }
    interface VeEmptyTimelineButton {
        "onUploadClip"?: (event: DragEvent, mediaId: string) => void;
    }
    interface VeFiltersPanelContainer {
        "onClose"?: () => void;
    }
    interface VeImageClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeInfoBanner {
        "icon"?: () => JSX.Element;
        "message"?: string;
        "title": string;
    }
    interface VeInput {
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onChangeText"?: (value: string) => void;
        "placeholder"?: string;
        "type": InputType;
        "value"?: string;
    }
    interface VeLabel {
        "error"?: boolean;
    }
    interface VeLayout {
        "onDropFiles"?: (files: FileList) => Promise<void>;
    }
    interface VeLoadingLayout {
    }
    interface VeLoadingSpinner {
    }
    interface VeLogo {
        "height": number;
        "width": number;
    }
    interface VeLottieClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeMediaCard {
        "isLoaded": boolean;
        "mediaData": MediaData;
        "onClick": () => void;
        "onDelete": () => void;
    }
    interface VeMediaPanelContainer {
        "onClose"?: () => void;
    }
    interface VeMissingConfigurationLayout {
    }
    interface VeModal {
        "content"?: HTMLElement | null;
        "open": boolean;
    }
    interface VeNavbar {
    }
    interface VeNoSubtitlesSection {
        "onAdd": () => void;
        "onImportSrt": (srtContent: string) => void;
    }
    interface VeOption {
        "index"?: number;
        "label": string;
        "optionStyle"?: Record<string, string>;
        "value": unknown;
    }
    interface VePanel {
        "isMedia"?: boolean;
        "onClose"?: () => void;
    }
    interface VePanelGridListSection {
        "class"?: string;
        "columns"?: number;
        "data": unknown[];
        "isExtended"?: boolean | undefined;
        "isLoading"?: boolean;
        "onExtend"?: () => void;
        "renderCard": (item: any) => HTMLElement;
        "renderFirst"?: () => HTMLElement;
        "title": string;
        "visibleItemsCount": number;
    }
    interface VePaper {
        "direction": PaperDirection;
    }
    interface VePlaceholderPanelCard {
    }
    interface VePlayhead {
    }
    interface VePortal {
    }
    interface VeRange {
    }
    interface VeRenderingLayout {
    }
    interface VeSearchbar {
        "onChangeText"?: (value: string) => void;
    }
    interface VeSelect {
        "label"?: string;
        "selectStyle"?: Record<string, string>;
        "value"?: string;
        "variant"?: SelectVariant;
    }
    interface VeShapeClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeSidebar {
    }
    interface VeStockPanelContainer {
        "onClose"?: () => void;
    }
    interface VeSubtitleRow {
        "isActive": boolean;
        "onChangeIn": (value: number) => boolean;
        "onChangeOut": (value: number) => boolean;
        "onChangeText": (value: string) => void;
        "onDelete": () => void;
        "subtitle": TextBlock;
    }
    interface VeSubtitleRowDivider {
        "onAdd": () => void;
        "onMerge": () => void;
    }
    interface VeSubtitlesClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeSubtitlesPanelContainer {
        "onClose"?: () => void;
    }
    interface VeSubtitlesStylesContainer {
    }
    interface VeTabs {
        "tabs": TabOptions[];
    }
    interface VeTextClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeTextPanelContainer {
    }
    interface VeTextarea {
        "defaultValue"?: string;
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onChangeText"?: (value: string) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface VeTimeline {
    }
    interface VeTrack {
        "layerId": string;
    }
    interface VeTrackDivider {
        "index": number;
        "onDropMediaClip"?: (event: DragEvent, mediaId: string) => void;
        "onDropTextClip"?: (event: DragEvent, title: TitleDescription) => void;
    }
    interface VeTransition {
        "permanentTransition"?: { transitionId: string };
        "temporaryTransition"?: { startTime: number; layerId: string; clipId: string };
        "type": "permanent" | "temporary" | null;
    }
    interface VeTransitionsPanelContainer {
        "onClose"?: () => void;
    }
    interface VeVideoClip {
        "clipId": string;
        "layerId": string;
    }
}
export interface RendleyVideoEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRendleyVideoEditorElement;
}
export interface VeCanvasTimeRulerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVeCanvasTimeRulerElement;
}
export interface VeOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVeOptionElement;
}
export interface VePlayheadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVePlayheadElement;
}
export interface VeSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVeSelectElement;
}
export interface VeTimelineCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVeTimelineElement;
}
declare global {
    interface HTMLRendleyVideoEditorElementEventMap {
        "onReady": void;
        "onError": unknown;
        "onRenderSuccess": string;
        "onRenderError": string;
    }
    interface HTMLRendleyVideoEditorElement extends Components.RendleyVideoEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRendleyVideoEditorElementEventMap>(type: K, listener: (this: HTMLRendleyVideoEditorElement, ev: RendleyVideoEditorCustomEvent<HTMLRendleyVideoEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRendleyVideoEditorElementEventMap>(type: K, listener: (this: HTMLRendleyVideoEditorElement, ev: RendleyVideoEditorCustomEvent<HTMLRendleyVideoEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRendleyVideoEditorElement: {
        prototype: HTMLRendleyVideoEditorElement;
        new (): HTMLRendleyVideoEditorElement;
    };
    interface HTMLVeApplyNoneCardElement extends Components.VeApplyNoneCard, HTMLStencilElement {
    }
    var HTMLVeApplyNoneCardElement: {
        prototype: HTMLVeApplyNoneCardElement;
        new (): HTMLVeApplyNoneCardElement;
    };
    interface HTMLVeAspectRatioFormElement extends Components.VeAspectRatioForm, HTMLStencilElement {
    }
    var HTMLVeAspectRatioFormElement: {
        prototype: HTMLVeAspectRatioFormElement;
        new (): HTMLVeAspectRatioFormElement;
    };
    interface HTMLVeAspectRatioSelectorElement extends Components.VeAspectRatioSelector, HTMLStencilElement {
    }
    var HTMLVeAspectRatioSelectorElement: {
        prototype: HTMLVeAspectRatioSelectorElement;
        new (): HTMLVeAspectRatioSelectorElement;
    };
    interface HTMLVeAudioClipElement extends Components.VeAudioClip, HTMLStencilElement {
    }
    var HTMLVeAudioClipElement: {
        prototype: HTMLVeAudioClipElement;
        new (): HTMLVeAudioClipElement;
    };
    interface HTMLVeBtnElement extends Components.VeBtn, HTMLStencilElement {
    }
    var HTMLVeBtnElement: {
        prototype: HTMLVeBtnElement;
        new (): HTMLVeBtnElement;
    };
    interface HTMLVeBtnGroupElement extends Components.VeBtnGroup, HTMLStencilElement {
    }
    var HTMLVeBtnGroupElement: {
        prototype: HTMLVeBtnGroupElement;
        new (): HTMLVeBtnGroupElement;
    };
    interface HTMLVeCanvasTimeRulerElementEventMap {
        "seekingTimeRulerStart": {
    event: MouseEvent;
    x: number;
  };
    }
    interface HTMLVeCanvasTimeRulerElement extends Components.VeCanvasTimeRuler, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVeCanvasTimeRulerElementEventMap>(type: K, listener: (this: HTMLVeCanvasTimeRulerElement, ev: VeCanvasTimeRulerCustomEvent<HTMLVeCanvasTimeRulerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVeCanvasTimeRulerElementEventMap>(type: K, listener: (this: HTMLVeCanvasTimeRulerElement, ev: VeCanvasTimeRulerCustomEvent<HTMLVeCanvasTimeRulerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVeCanvasTimeRulerElement: {
        prototype: HTMLVeCanvasTimeRulerElement;
        new (): HTMLVeCanvasTimeRulerElement;
    };
    interface HTMLVeCardLoadingOverlayElement extends Components.VeCardLoadingOverlay, HTMLStencilElement {
    }
    var HTMLVeCardLoadingOverlayElement: {
        prototype: HTMLVeCardLoadingOverlayElement;
        new (): HTMLVeCardLoadingOverlayElement;
    };
    interface HTMLVeClipElement extends Components.VeClip, HTMLStencilElement {
    }
    var HTMLVeClipElement: {
        prototype: HTMLVeClipElement;
        new (): HTMLVeClipElement;
    };
    interface HTMLVeColorInputElement extends Components.VeColorInput, HTMLStencilElement {
    }
    var HTMLVeColorInputElement: {
        prototype: HTMLVeColorInputElement;
        new (): HTMLVeColorInputElement;
    };
    interface HTMLVeColorPickerElement extends Components.VeColorPicker, HTMLStencilElement {
    }
    var HTMLVeColorPickerElement: {
        prototype: HTMLVeColorPickerElement;
        new (): HTMLVeColorPickerElement;
    };
    interface HTMLVeCompositionElement extends Components.VeComposition, HTMLStencilElement {
    }
    var HTMLVeCompositionElement: {
        prototype: HTMLVeCompositionElement;
        new (): HTMLVeCompositionElement;
    };
    interface HTMLVeConfigurationPanelElement extends Components.VeConfigurationPanel, HTMLStencilElement {
    }
    var HTMLVeConfigurationPanelElement: {
        prototype: HTMLVeConfigurationPanelElement;
        new (): HTMLVeConfigurationPanelElement;
    };
    interface HTMLVeContextMenuElement extends Components.VeContextMenu, HTMLStencilElement {
    }
    var HTMLVeContextMenuElement: {
        prototype: HTMLVeContextMenuElement;
        new (): HTMLVeContextMenuElement;
    };
    interface HTMLVeControlsElement extends Components.VeControls, HTMLStencilElement {
    }
    var HTMLVeControlsElement: {
        prototype: HTMLVeControlsElement;
        new (): HTMLVeControlsElement;
    };
    interface HTMLVeDragDropOverlayElement extends Components.VeDragDropOverlay, HTMLStencilElement {
    }
    var HTMLVeDragDropOverlayElement: {
        prototype: HTMLVeDragDropOverlayElement;
        new (): HTMLVeDragDropOverlayElement;
    };
    interface HTMLVeDragResizeRotateContainerElement extends Components.VeDragResizeRotateContainer, HTMLStencilElement {
    }
    var HTMLVeDragResizeRotateContainerElement: {
        prototype: HTMLVeDragResizeRotateContainerElement;
        new (): HTMLVeDragResizeRotateContainerElement;
    };
    interface HTMLVeDraggableElement extends Components.VeDraggable, HTMLStencilElement {
    }
    var HTMLVeDraggableElement: {
        prototype: HTMLVeDraggableElement;
        new (): HTMLVeDraggableElement;
    };
    interface HTMLVeEditLottiePanelElement extends Components.VeEditLottiePanel, HTMLStencilElement {
    }
    var HTMLVeEditLottiePanelElement: {
        prototype: HTMLVeEditLottiePanelElement;
        new (): HTMLVeEditLottiePanelElement;
    };
    interface HTMLVeEditPanelContainerElement extends Components.VeEditPanelContainer, HTMLStencilElement {
    }
    var HTMLVeEditPanelContainerElement: {
        prototype: HTMLVeEditPanelContainerElement;
        new (): HTMLVeEditPanelContainerElement;
    };
    interface HTMLVeEditTextPanelElement extends Components.VeEditTextPanel, HTMLStencilElement {
    }
    var HTMLVeEditTextPanelElement: {
        prototype: HTMLVeEditTextPanelElement;
        new (): HTMLVeEditTextPanelElement;
    };
    interface HTMLVeEffectShowcaseCardElement extends Components.VeEffectShowcaseCard, HTMLStencilElement {
    }
    var HTMLVeEffectShowcaseCardElement: {
        prototype: HTMLVeEffectShowcaseCardElement;
        new (): HTMLVeEffectShowcaseCardElement;
    };
    interface HTMLVeEmptyTimelineButtonElement extends Components.VeEmptyTimelineButton, HTMLStencilElement {
    }
    var HTMLVeEmptyTimelineButtonElement: {
        prototype: HTMLVeEmptyTimelineButtonElement;
        new (): HTMLVeEmptyTimelineButtonElement;
    };
    interface HTMLVeFiltersPanelContainerElement extends Components.VeFiltersPanelContainer, HTMLStencilElement {
    }
    var HTMLVeFiltersPanelContainerElement: {
        prototype: HTMLVeFiltersPanelContainerElement;
        new (): HTMLVeFiltersPanelContainerElement;
    };
    interface HTMLVeImageClipElement extends Components.VeImageClip, HTMLStencilElement {
    }
    var HTMLVeImageClipElement: {
        prototype: HTMLVeImageClipElement;
        new (): HTMLVeImageClipElement;
    };
    interface HTMLVeInfoBannerElement extends Components.VeInfoBanner, HTMLStencilElement {
    }
    var HTMLVeInfoBannerElement: {
        prototype: HTMLVeInfoBannerElement;
        new (): HTMLVeInfoBannerElement;
    };
    interface HTMLVeInputElement extends Components.VeInput, HTMLStencilElement {
    }
    var HTMLVeInputElement: {
        prototype: HTMLVeInputElement;
        new (): HTMLVeInputElement;
    };
    interface HTMLVeLabelElement extends Components.VeLabel, HTMLStencilElement {
    }
    var HTMLVeLabelElement: {
        prototype: HTMLVeLabelElement;
        new (): HTMLVeLabelElement;
    };
    interface HTMLVeLayoutElement extends Components.VeLayout, HTMLStencilElement {
    }
    var HTMLVeLayoutElement: {
        prototype: HTMLVeLayoutElement;
        new (): HTMLVeLayoutElement;
    };
    interface HTMLVeLoadingLayoutElement extends Components.VeLoadingLayout, HTMLStencilElement {
    }
    var HTMLVeLoadingLayoutElement: {
        prototype: HTMLVeLoadingLayoutElement;
        new (): HTMLVeLoadingLayoutElement;
    };
    interface HTMLVeLoadingSpinnerElement extends Components.VeLoadingSpinner, HTMLStencilElement {
    }
    var HTMLVeLoadingSpinnerElement: {
        prototype: HTMLVeLoadingSpinnerElement;
        new (): HTMLVeLoadingSpinnerElement;
    };
    interface HTMLVeLogoElement extends Components.VeLogo, HTMLStencilElement {
    }
    var HTMLVeLogoElement: {
        prototype: HTMLVeLogoElement;
        new (): HTMLVeLogoElement;
    };
    interface HTMLVeLottieClipElement extends Components.VeLottieClip, HTMLStencilElement {
    }
    var HTMLVeLottieClipElement: {
        prototype: HTMLVeLottieClipElement;
        new (): HTMLVeLottieClipElement;
    };
    interface HTMLVeMediaCardElement extends Components.VeMediaCard, HTMLStencilElement {
    }
    var HTMLVeMediaCardElement: {
        prototype: HTMLVeMediaCardElement;
        new (): HTMLVeMediaCardElement;
    };
    interface HTMLVeMediaPanelContainerElement extends Components.VeMediaPanelContainer, HTMLStencilElement {
    }
    var HTMLVeMediaPanelContainerElement: {
        prototype: HTMLVeMediaPanelContainerElement;
        new (): HTMLVeMediaPanelContainerElement;
    };
    interface HTMLVeMissingConfigurationLayoutElement extends Components.VeMissingConfigurationLayout, HTMLStencilElement {
    }
    var HTMLVeMissingConfigurationLayoutElement: {
        prototype: HTMLVeMissingConfigurationLayoutElement;
        new (): HTMLVeMissingConfigurationLayoutElement;
    };
    interface HTMLVeModalElement extends Components.VeModal, HTMLStencilElement {
    }
    var HTMLVeModalElement: {
        prototype: HTMLVeModalElement;
        new (): HTMLVeModalElement;
    };
    interface HTMLVeNavbarElement extends Components.VeNavbar, HTMLStencilElement {
    }
    var HTMLVeNavbarElement: {
        prototype: HTMLVeNavbarElement;
        new (): HTMLVeNavbarElement;
    };
    interface HTMLVeNoSubtitlesSectionElement extends Components.VeNoSubtitlesSection, HTMLStencilElement {
    }
    var HTMLVeNoSubtitlesSectionElement: {
        prototype: HTMLVeNoSubtitlesSectionElement;
        new (): HTMLVeNoSubtitlesSectionElement;
    };
    interface HTMLVeOptionElementEventMap {
        "optionSelected": { label: string; value: unknown };
    }
    interface HTMLVeOptionElement extends Components.VeOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVeOptionElementEventMap>(type: K, listener: (this: HTMLVeOptionElement, ev: VeOptionCustomEvent<HTMLVeOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVeOptionElementEventMap>(type: K, listener: (this: HTMLVeOptionElement, ev: VeOptionCustomEvent<HTMLVeOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVeOptionElement: {
        prototype: HTMLVeOptionElement;
        new (): HTMLVeOptionElement;
    };
    interface HTMLVePanelElement extends Components.VePanel, HTMLStencilElement {
    }
    var HTMLVePanelElement: {
        prototype: HTMLVePanelElement;
        new (): HTMLVePanelElement;
    };
    interface HTMLVePanelGridListSectionElement extends Components.VePanelGridListSection, HTMLStencilElement {
    }
    var HTMLVePanelGridListSectionElement: {
        prototype: HTMLVePanelGridListSectionElement;
        new (): HTMLVePanelGridListSectionElement;
    };
    interface HTMLVePaperElement extends Components.VePaper, HTMLStencilElement {
    }
    var HTMLVePaperElement: {
        prototype: HTMLVePaperElement;
        new (): HTMLVePaperElement;
    };
    interface HTMLVePlaceholderPanelCardElement extends Components.VePlaceholderPanelCard, HTMLStencilElement {
    }
    var HTMLVePlaceholderPanelCardElement: {
        prototype: HTMLVePlaceholderPanelCardElement;
        new (): HTMLVePlaceholderPanelCardElement;
    };
    interface HTMLVePlayheadElementEventMap {
        "scrollToPage": number;
    }
    interface HTMLVePlayheadElement extends Components.VePlayhead, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVePlayheadElementEventMap>(type: K, listener: (this: HTMLVePlayheadElement, ev: VePlayheadCustomEvent<HTMLVePlayheadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVePlayheadElementEventMap>(type: K, listener: (this: HTMLVePlayheadElement, ev: VePlayheadCustomEvent<HTMLVePlayheadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVePlayheadElement: {
        prototype: HTMLVePlayheadElement;
        new (): HTMLVePlayheadElement;
    };
    interface HTMLVePortalElement extends Components.VePortal, HTMLStencilElement {
    }
    var HTMLVePortalElement: {
        prototype: HTMLVePortalElement;
        new (): HTMLVePortalElement;
    };
    interface HTMLVeRangeElement extends Components.VeRange, HTMLStencilElement {
    }
    var HTMLVeRangeElement: {
        prototype: HTMLVeRangeElement;
        new (): HTMLVeRangeElement;
    };
    interface HTMLVeRenderingLayoutElement extends Components.VeRenderingLayout, HTMLStencilElement {
    }
    var HTMLVeRenderingLayoutElement: {
        prototype: HTMLVeRenderingLayoutElement;
        new (): HTMLVeRenderingLayoutElement;
    };
    interface HTMLVeSearchbarElement extends Components.VeSearchbar, HTMLStencilElement {
    }
    var HTMLVeSearchbarElement: {
        prototype: HTMLVeSearchbarElement;
        new (): HTMLVeSearchbarElement;
    };
    interface HTMLVeSelectElementEventMap {
        "optionSelected": { label: string; value: string };
    }
    interface HTMLVeSelectElement extends Components.VeSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVeSelectElementEventMap>(type: K, listener: (this: HTMLVeSelectElement, ev: VeSelectCustomEvent<HTMLVeSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVeSelectElementEventMap>(type: K, listener: (this: HTMLVeSelectElement, ev: VeSelectCustomEvent<HTMLVeSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVeSelectElement: {
        prototype: HTMLVeSelectElement;
        new (): HTMLVeSelectElement;
    };
    interface HTMLVeShapeClipElement extends Components.VeShapeClip, HTMLStencilElement {
    }
    var HTMLVeShapeClipElement: {
        prototype: HTMLVeShapeClipElement;
        new (): HTMLVeShapeClipElement;
    };
    interface HTMLVeSidebarElement extends Components.VeSidebar, HTMLStencilElement {
    }
    var HTMLVeSidebarElement: {
        prototype: HTMLVeSidebarElement;
        new (): HTMLVeSidebarElement;
    };
    interface HTMLVeStockPanelContainerElement extends Components.VeStockPanelContainer, HTMLStencilElement {
    }
    var HTMLVeStockPanelContainerElement: {
        prototype: HTMLVeStockPanelContainerElement;
        new (): HTMLVeStockPanelContainerElement;
    };
    interface HTMLVeSubtitleRowElement extends Components.VeSubtitleRow, HTMLStencilElement {
    }
    var HTMLVeSubtitleRowElement: {
        prototype: HTMLVeSubtitleRowElement;
        new (): HTMLVeSubtitleRowElement;
    };
    interface HTMLVeSubtitleRowDividerElement extends Components.VeSubtitleRowDivider, HTMLStencilElement {
    }
    var HTMLVeSubtitleRowDividerElement: {
        prototype: HTMLVeSubtitleRowDividerElement;
        new (): HTMLVeSubtitleRowDividerElement;
    };
    interface HTMLVeSubtitlesClipElement extends Components.VeSubtitlesClip, HTMLStencilElement {
    }
    var HTMLVeSubtitlesClipElement: {
        prototype: HTMLVeSubtitlesClipElement;
        new (): HTMLVeSubtitlesClipElement;
    };
    interface HTMLVeSubtitlesPanelContainerElement extends Components.VeSubtitlesPanelContainer, HTMLStencilElement {
    }
    var HTMLVeSubtitlesPanelContainerElement: {
        prototype: HTMLVeSubtitlesPanelContainerElement;
        new (): HTMLVeSubtitlesPanelContainerElement;
    };
    interface HTMLVeSubtitlesStylesContainerElement extends Components.VeSubtitlesStylesContainer, HTMLStencilElement {
    }
    var HTMLVeSubtitlesStylesContainerElement: {
        prototype: HTMLVeSubtitlesStylesContainerElement;
        new (): HTMLVeSubtitlesStylesContainerElement;
    };
    interface HTMLVeTabsElement extends Components.VeTabs, HTMLStencilElement {
    }
    var HTMLVeTabsElement: {
        prototype: HTMLVeTabsElement;
        new (): HTMLVeTabsElement;
    };
    interface HTMLVeTextClipElement extends Components.VeTextClip, HTMLStencilElement {
    }
    var HTMLVeTextClipElement: {
        prototype: HTMLVeTextClipElement;
        new (): HTMLVeTextClipElement;
    };
    interface HTMLVeTextPanelContainerElement extends Components.VeTextPanelContainer, HTMLStencilElement {
    }
    var HTMLVeTextPanelContainerElement: {
        prototype: HTMLVeTextPanelContainerElement;
        new (): HTMLVeTextPanelContainerElement;
    };
    interface HTMLVeTextareaElement extends Components.VeTextarea, HTMLStencilElement {
    }
    var HTMLVeTextareaElement: {
        prototype: HTMLVeTextareaElement;
        new (): HTMLVeTextareaElement;
    };
    interface HTMLVeTimelineElementEventMap {
        "tracksScrollLeft": number;
    }
    interface HTMLVeTimelineElement extends Components.VeTimeline, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVeTimelineElementEventMap>(type: K, listener: (this: HTMLVeTimelineElement, ev: VeTimelineCustomEvent<HTMLVeTimelineElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVeTimelineElementEventMap>(type: K, listener: (this: HTMLVeTimelineElement, ev: VeTimelineCustomEvent<HTMLVeTimelineElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVeTimelineElement: {
        prototype: HTMLVeTimelineElement;
        new (): HTMLVeTimelineElement;
    };
    interface HTMLVeTrackElement extends Components.VeTrack, HTMLStencilElement {
    }
    var HTMLVeTrackElement: {
        prototype: HTMLVeTrackElement;
        new (): HTMLVeTrackElement;
    };
    interface HTMLVeTrackDividerElement extends Components.VeTrackDivider, HTMLStencilElement {
    }
    var HTMLVeTrackDividerElement: {
        prototype: HTMLVeTrackDividerElement;
        new (): HTMLVeTrackDividerElement;
    };
    interface HTMLVeTransitionElement extends Components.VeTransition, HTMLStencilElement {
    }
    var HTMLVeTransitionElement: {
        prototype: HTMLVeTransitionElement;
        new (): HTMLVeTransitionElement;
    };
    interface HTMLVeTransitionsPanelContainerElement extends Components.VeTransitionsPanelContainer, HTMLStencilElement {
    }
    var HTMLVeTransitionsPanelContainerElement: {
        prototype: HTMLVeTransitionsPanelContainerElement;
        new (): HTMLVeTransitionsPanelContainerElement;
    };
    interface HTMLVeVideoClipElement extends Components.VeVideoClip, HTMLStencilElement {
    }
    var HTMLVeVideoClipElement: {
        prototype: HTMLVeVideoClipElement;
        new (): HTMLVeVideoClipElement;
    };
    interface HTMLElementTagNameMap {
        "rendley-video-editor": HTMLRendleyVideoEditorElement;
        "ve-apply-none-card": HTMLVeApplyNoneCardElement;
        "ve-aspect-ratio-form": HTMLVeAspectRatioFormElement;
        "ve-aspect-ratio-selector": HTMLVeAspectRatioSelectorElement;
        "ve-audio-clip": HTMLVeAudioClipElement;
        "ve-btn": HTMLVeBtnElement;
        "ve-btn-group": HTMLVeBtnGroupElement;
        "ve-canvas-time-ruler": HTMLVeCanvasTimeRulerElement;
        "ve-card-loading-overlay": HTMLVeCardLoadingOverlayElement;
        "ve-clip": HTMLVeClipElement;
        "ve-color-input": HTMLVeColorInputElement;
        "ve-color-picker": HTMLVeColorPickerElement;
        "ve-composition": HTMLVeCompositionElement;
        "ve-configuration-panel": HTMLVeConfigurationPanelElement;
        "ve-context-menu": HTMLVeContextMenuElement;
        "ve-controls": HTMLVeControlsElement;
        "ve-drag-drop-overlay": HTMLVeDragDropOverlayElement;
        "ve-drag-resize-rotate-container": HTMLVeDragResizeRotateContainerElement;
        "ve-draggable": HTMLVeDraggableElement;
        "ve-edit-lottie-panel": HTMLVeEditLottiePanelElement;
        "ve-edit-panel-container": HTMLVeEditPanelContainerElement;
        "ve-edit-text-panel": HTMLVeEditTextPanelElement;
        "ve-effect-showcase-card": HTMLVeEffectShowcaseCardElement;
        "ve-empty-timeline-button": HTMLVeEmptyTimelineButtonElement;
        "ve-filters-panel-container": HTMLVeFiltersPanelContainerElement;
        "ve-image-clip": HTMLVeImageClipElement;
        "ve-info-banner": HTMLVeInfoBannerElement;
        "ve-input": HTMLVeInputElement;
        "ve-label": HTMLVeLabelElement;
        "ve-layout": HTMLVeLayoutElement;
        "ve-loading-layout": HTMLVeLoadingLayoutElement;
        "ve-loading-spinner": HTMLVeLoadingSpinnerElement;
        "ve-logo": HTMLVeLogoElement;
        "ve-lottie-clip": HTMLVeLottieClipElement;
        "ve-media-card": HTMLVeMediaCardElement;
        "ve-media-panel-container": HTMLVeMediaPanelContainerElement;
        "ve-missing-configuration-layout": HTMLVeMissingConfigurationLayoutElement;
        "ve-modal": HTMLVeModalElement;
        "ve-navbar": HTMLVeNavbarElement;
        "ve-no-subtitles-section": HTMLVeNoSubtitlesSectionElement;
        "ve-option": HTMLVeOptionElement;
        "ve-panel": HTMLVePanelElement;
        "ve-panel-grid-list-section": HTMLVePanelGridListSectionElement;
        "ve-paper": HTMLVePaperElement;
        "ve-placeholder-panel-card": HTMLVePlaceholderPanelCardElement;
        "ve-playhead": HTMLVePlayheadElement;
        "ve-portal": HTMLVePortalElement;
        "ve-range": HTMLVeRangeElement;
        "ve-rendering-layout": HTMLVeRenderingLayoutElement;
        "ve-searchbar": HTMLVeSearchbarElement;
        "ve-select": HTMLVeSelectElement;
        "ve-shape-clip": HTMLVeShapeClipElement;
        "ve-sidebar": HTMLVeSidebarElement;
        "ve-stock-panel-container": HTMLVeStockPanelContainerElement;
        "ve-subtitle-row": HTMLVeSubtitleRowElement;
        "ve-subtitle-row-divider": HTMLVeSubtitleRowDividerElement;
        "ve-subtitles-clip": HTMLVeSubtitlesClipElement;
        "ve-subtitles-panel-container": HTMLVeSubtitlesPanelContainerElement;
        "ve-subtitles-styles-container": HTMLVeSubtitlesStylesContainerElement;
        "ve-tabs": HTMLVeTabsElement;
        "ve-text-clip": HTMLVeTextClipElement;
        "ve-text-panel-container": HTMLVeTextPanelContainerElement;
        "ve-textarea": HTMLVeTextareaElement;
        "ve-timeline": HTMLVeTimelineElement;
        "ve-track": HTMLVeTrackElement;
        "ve-track-divider": HTMLVeTrackDividerElement;
        "ve-transition": HTMLVeTransitionElement;
        "ve-transitions-panel-container": HTMLVeTransitionsPanelContainerElement;
        "ve-video-clip": HTMLVeVideoClipElement;
    }
}
declare namespace LocalJSX {
    interface RendleyVideoEditor {
        "effectsPath"?: string;
        "filtersPath"?: string;
        "giphyapikey"?: string;
        "licensekey"?: string;
        "licensename"?: string;
        "onOnError"?: (event: RendleyVideoEditorCustomEvent<unknown>) => void;
        "onOnReady"?: (event: RendleyVideoEditorCustomEvent<void>) => void;
        "onOnRenderError"?: (event: RendleyVideoEditorCustomEvent<string>) => void;
        "onOnRenderSuccess"?: (event: RendleyVideoEditorCustomEvent<string>) => void;
        "pexelsapikey"?: string;
        "subtitlesStylesPath"?: string;
        "theme"?: ThemeVariants;
        "titlesPath"?: string;
        "transitionsPath"?: string;
    }
    interface VeApplyNoneCard {
    }
    interface VeAspectRatioForm {
        "onClose"?: () => void;
        "onSubmitAspectRatio"?: (width: number, height: number) => void;
    }
    interface VeAspectRatioSelector {
    }
    interface VeAudioClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeBtn {
        "class"?: string;
        "disabled"?: boolean;
        "variant"?: ButtonVariant;
    }
    interface VeBtnGroup {
        "label"?: string;
    }
    interface VeCanvasTimeRuler {
        "onSeekingTimeRulerStart"?: (event: VeCanvasTimeRulerCustomEvent<{
    event: MouseEvent;
    x: number;
  }>) => void;
    }
    interface VeCardLoadingOverlay {
    }
    interface VeClip {
        "clipId": string;
        "filename"?: string;
        "isResizeEnabled"?: boolean;
        "layerId": string;
        "thumbnail"?: string;
    }
    interface VeColorInput {
        "color"?: string;
        "label"?: string;
        "onChangeColor"?: (color: string) => void;
    }
    interface VeColorPicker {
        "color"?: string;
        "onChangeColor"?: (color: string) => void;
    }
    interface VeComposition {
    }
    interface VeConfigurationPanel {
        "title"?: string;
    }
    interface VeContextMenu {
    }
    interface VeControls {
    }
    interface VeDragDropOverlay {
    }
    interface VeDragResizeRotateContainer {
    }
    interface VeDraggable {
        "isDraggable"?: boolean;
        "onDragEnd"?: (event: DragEvent) => void;
        "onDragStart"?: (event: DragEvent) => void;
        "payload"?: object;
    }
    interface VeEditLottiePanel {
        "clipId": string;
    }
    interface VeEditPanelContainer {
        "onClose"?: () => void;
    }
    interface VeEditTextPanel {
        "clipId": string;
    }
    interface VeEffectShowcaseCard {
        "imageUrl"?: string;
        "isSelected"?: boolean;
        "name"?: string;
        "onDelete"?: () => void;
        "onMouseDown"?: (event: MouseEvent) => Promise<unknown> | void;
        "tooltip"?: string;
        "videoUrl"?: string;
    }
    interface VeEmptyTimelineButton {
        "onUploadClip"?: (event: DragEvent, mediaId: string) => void;
    }
    interface VeFiltersPanelContainer {
        "onClose"?: () => void;
    }
    interface VeImageClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeInfoBanner {
        "icon"?: () => JSX.Element;
        "message"?: string;
        "title": string;
    }
    interface VeInput {
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onChangeText"?: (value: string) => void;
        "placeholder"?: string;
        "type"?: InputType;
        "value"?: string;
    }
    interface VeLabel {
        "error"?: boolean;
    }
    interface VeLayout {
        "onDropFiles"?: (files: FileList) => Promise<void>;
    }
    interface VeLoadingLayout {
    }
    interface VeLoadingSpinner {
    }
    interface VeLogo {
        "height"?: number;
        "width"?: number;
    }
    interface VeLottieClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeMediaCard {
        "isLoaded"?: boolean;
        "mediaData": MediaData;
        "onClick": () => void;
        "onDelete": () => void;
    }
    interface VeMediaPanelContainer {
        "onClose"?: () => void;
    }
    interface VeMissingConfigurationLayout {
    }
    interface VeModal {
        "content"?: HTMLElement | null;
        "open"?: boolean;
    }
    interface VeNavbar {
    }
    interface VeNoSubtitlesSection {
        "onAdd": () => void;
        "onImportSrt": (srtContent: string) => void;
    }
    interface VeOption {
        "index"?: number;
        "label"?: string;
        "onOptionSelected"?: (event: VeOptionCustomEvent<{ label: string; value: unknown }>) => void;
        "optionStyle"?: Record<string, string>;
        "value"?: unknown;
    }
    interface VePanel {
        "isMedia"?: boolean;
        "onClose"?: () => void;
    }
    interface VePanelGridListSection {
        "class"?: string;
        "columns"?: number;
        "data"?: unknown[];
        "isExtended"?: boolean | undefined;
        "isLoading"?: boolean;
        "onExtend"?: () => void;
        "renderCard": (item: any) => HTMLElement;
        "renderFirst"?: () => HTMLElement;
        "title"?: string;
        "visibleItemsCount"?: number;
    }
    interface VePaper {
        "direction"?: PaperDirection;
    }
    interface VePlaceholderPanelCard {
    }
    interface VePlayhead {
        "onScrollToPage"?: (event: VePlayheadCustomEvent<number>) => void;
    }
    interface VePortal {
    }
    interface VeRange {
    }
    interface VeRenderingLayout {
    }
    interface VeSearchbar {
        "onChangeText"?: (value: string) => void;
    }
    interface VeSelect {
        "label"?: string;
        "onOptionSelected"?: (event: VeSelectCustomEvent<{ label: string; value: string }>) => void;
        "selectStyle"?: Record<string, string>;
        "value"?: string;
        "variant"?: SelectVariant;
    }
    interface VeShapeClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeSidebar {
    }
    interface VeStockPanelContainer {
        "onClose"?: () => void;
    }
    interface VeSubtitleRow {
        "isActive": boolean;
        "onChangeIn": (value: number) => boolean;
        "onChangeOut": (value: number) => boolean;
        "onChangeText": (value: string) => void;
        "onDelete": () => void;
        "subtitle": TextBlock;
    }
    interface VeSubtitleRowDivider {
        "onAdd": () => void;
        "onMerge": () => void;
    }
    interface VeSubtitlesClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeSubtitlesPanelContainer {
        "onClose"?: () => void;
    }
    interface VeSubtitlesStylesContainer {
    }
    interface VeTabs {
        "tabs"?: TabOptions[];
    }
    interface VeTextClip {
        "clipId": string;
        "layerId": string;
    }
    interface VeTextPanelContainer {
    }
    interface VeTextarea {
        "defaultValue"?: string;
        "error"?: string;
        "label"?: string;
        "name"?: string;
        "onChangeText"?: (value: string) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface VeTimeline {
        "onTracksScrollLeft"?: (event: VeTimelineCustomEvent<number>) => void;
    }
    interface VeTrack {
        "layerId": string;
    }
    interface VeTrackDivider {
        "index"?: number;
        "onDropMediaClip"?: (event: DragEvent, mediaId: string) => void;
        "onDropTextClip"?: (event: DragEvent, title: TitleDescription) => void;
    }
    interface VeTransition {
        "permanentTransition"?: { transitionId: string };
        "temporaryTransition"?: { startTime: number; layerId: string; clipId: string };
        "type"?: "permanent" | "temporary" | null;
    }
    interface VeTransitionsPanelContainer {
        "onClose"?: () => void;
    }
    interface VeVideoClip {
        "clipId": string;
        "layerId": string;
    }
    interface IntrinsicElements {
        "rendley-video-editor": RendleyVideoEditor;
        "ve-apply-none-card": VeApplyNoneCard;
        "ve-aspect-ratio-form": VeAspectRatioForm;
        "ve-aspect-ratio-selector": VeAspectRatioSelector;
        "ve-audio-clip": VeAudioClip;
        "ve-btn": VeBtn;
        "ve-btn-group": VeBtnGroup;
        "ve-canvas-time-ruler": VeCanvasTimeRuler;
        "ve-card-loading-overlay": VeCardLoadingOverlay;
        "ve-clip": VeClip;
        "ve-color-input": VeColorInput;
        "ve-color-picker": VeColorPicker;
        "ve-composition": VeComposition;
        "ve-configuration-panel": VeConfigurationPanel;
        "ve-context-menu": VeContextMenu;
        "ve-controls": VeControls;
        "ve-drag-drop-overlay": VeDragDropOverlay;
        "ve-drag-resize-rotate-container": VeDragResizeRotateContainer;
        "ve-draggable": VeDraggable;
        "ve-edit-lottie-panel": VeEditLottiePanel;
        "ve-edit-panel-container": VeEditPanelContainer;
        "ve-edit-text-panel": VeEditTextPanel;
        "ve-effect-showcase-card": VeEffectShowcaseCard;
        "ve-empty-timeline-button": VeEmptyTimelineButton;
        "ve-filters-panel-container": VeFiltersPanelContainer;
        "ve-image-clip": VeImageClip;
        "ve-info-banner": VeInfoBanner;
        "ve-input": VeInput;
        "ve-label": VeLabel;
        "ve-layout": VeLayout;
        "ve-loading-layout": VeLoadingLayout;
        "ve-loading-spinner": VeLoadingSpinner;
        "ve-logo": VeLogo;
        "ve-lottie-clip": VeLottieClip;
        "ve-media-card": VeMediaCard;
        "ve-media-panel-container": VeMediaPanelContainer;
        "ve-missing-configuration-layout": VeMissingConfigurationLayout;
        "ve-modal": VeModal;
        "ve-navbar": VeNavbar;
        "ve-no-subtitles-section": VeNoSubtitlesSection;
        "ve-option": VeOption;
        "ve-panel": VePanel;
        "ve-panel-grid-list-section": VePanelGridListSection;
        "ve-paper": VePaper;
        "ve-placeholder-panel-card": VePlaceholderPanelCard;
        "ve-playhead": VePlayhead;
        "ve-portal": VePortal;
        "ve-range": VeRange;
        "ve-rendering-layout": VeRenderingLayout;
        "ve-searchbar": VeSearchbar;
        "ve-select": VeSelect;
        "ve-shape-clip": VeShapeClip;
        "ve-sidebar": VeSidebar;
        "ve-stock-panel-container": VeStockPanelContainer;
        "ve-subtitle-row": VeSubtitleRow;
        "ve-subtitle-row-divider": VeSubtitleRowDivider;
        "ve-subtitles-clip": VeSubtitlesClip;
        "ve-subtitles-panel-container": VeSubtitlesPanelContainer;
        "ve-subtitles-styles-container": VeSubtitlesStylesContainer;
        "ve-tabs": VeTabs;
        "ve-text-clip": VeTextClip;
        "ve-text-panel-container": VeTextPanelContainer;
        "ve-textarea": VeTextarea;
        "ve-timeline": VeTimeline;
        "ve-track": VeTrack;
        "ve-track-divider": VeTrackDivider;
        "ve-transition": VeTransition;
        "ve-transitions-panel-container": VeTransitionsPanelContainer;
        "ve-video-clip": VeVideoClip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rendley-video-editor": LocalJSX.RendleyVideoEditor & JSXBase.HTMLAttributes<HTMLRendleyVideoEditorElement>;
            "ve-apply-none-card": LocalJSX.VeApplyNoneCard & JSXBase.HTMLAttributes<HTMLVeApplyNoneCardElement>;
            "ve-aspect-ratio-form": LocalJSX.VeAspectRatioForm & JSXBase.HTMLAttributes<HTMLVeAspectRatioFormElement>;
            "ve-aspect-ratio-selector": LocalJSX.VeAspectRatioSelector & JSXBase.HTMLAttributes<HTMLVeAspectRatioSelectorElement>;
            "ve-audio-clip": LocalJSX.VeAudioClip & JSXBase.HTMLAttributes<HTMLVeAudioClipElement>;
            "ve-btn": LocalJSX.VeBtn & JSXBase.HTMLAttributes<HTMLVeBtnElement>;
            "ve-btn-group": LocalJSX.VeBtnGroup & JSXBase.HTMLAttributes<HTMLVeBtnGroupElement>;
            "ve-canvas-time-ruler": LocalJSX.VeCanvasTimeRuler & JSXBase.HTMLAttributes<HTMLVeCanvasTimeRulerElement>;
            "ve-card-loading-overlay": LocalJSX.VeCardLoadingOverlay & JSXBase.HTMLAttributes<HTMLVeCardLoadingOverlayElement>;
            "ve-clip": LocalJSX.VeClip & JSXBase.HTMLAttributes<HTMLVeClipElement>;
            "ve-color-input": LocalJSX.VeColorInput & JSXBase.HTMLAttributes<HTMLVeColorInputElement>;
            "ve-color-picker": LocalJSX.VeColorPicker & JSXBase.HTMLAttributes<HTMLVeColorPickerElement>;
            "ve-composition": LocalJSX.VeComposition & JSXBase.HTMLAttributes<HTMLVeCompositionElement>;
            "ve-configuration-panel": LocalJSX.VeConfigurationPanel & JSXBase.HTMLAttributes<HTMLVeConfigurationPanelElement>;
            "ve-context-menu": LocalJSX.VeContextMenu & JSXBase.HTMLAttributes<HTMLVeContextMenuElement>;
            "ve-controls": LocalJSX.VeControls & JSXBase.HTMLAttributes<HTMLVeControlsElement>;
            "ve-drag-drop-overlay": LocalJSX.VeDragDropOverlay & JSXBase.HTMLAttributes<HTMLVeDragDropOverlayElement>;
            "ve-drag-resize-rotate-container": LocalJSX.VeDragResizeRotateContainer & JSXBase.HTMLAttributes<HTMLVeDragResizeRotateContainerElement>;
            "ve-draggable": LocalJSX.VeDraggable & JSXBase.HTMLAttributes<HTMLVeDraggableElement>;
            "ve-edit-lottie-panel": LocalJSX.VeEditLottiePanel & JSXBase.HTMLAttributes<HTMLVeEditLottiePanelElement>;
            "ve-edit-panel-container": LocalJSX.VeEditPanelContainer & JSXBase.HTMLAttributes<HTMLVeEditPanelContainerElement>;
            "ve-edit-text-panel": LocalJSX.VeEditTextPanel & JSXBase.HTMLAttributes<HTMLVeEditTextPanelElement>;
            "ve-effect-showcase-card": LocalJSX.VeEffectShowcaseCard & JSXBase.HTMLAttributes<HTMLVeEffectShowcaseCardElement>;
            "ve-empty-timeline-button": LocalJSX.VeEmptyTimelineButton & JSXBase.HTMLAttributes<HTMLVeEmptyTimelineButtonElement>;
            "ve-filters-panel-container": LocalJSX.VeFiltersPanelContainer & JSXBase.HTMLAttributes<HTMLVeFiltersPanelContainerElement>;
            "ve-image-clip": LocalJSX.VeImageClip & JSXBase.HTMLAttributes<HTMLVeImageClipElement>;
            "ve-info-banner": LocalJSX.VeInfoBanner & JSXBase.HTMLAttributes<HTMLVeInfoBannerElement>;
            "ve-input": LocalJSX.VeInput & JSXBase.HTMLAttributes<HTMLVeInputElement>;
            "ve-label": LocalJSX.VeLabel & JSXBase.HTMLAttributes<HTMLVeLabelElement>;
            "ve-layout": LocalJSX.VeLayout & JSXBase.HTMLAttributes<HTMLVeLayoutElement>;
            "ve-loading-layout": LocalJSX.VeLoadingLayout & JSXBase.HTMLAttributes<HTMLVeLoadingLayoutElement>;
            "ve-loading-spinner": LocalJSX.VeLoadingSpinner & JSXBase.HTMLAttributes<HTMLVeLoadingSpinnerElement>;
            "ve-logo": LocalJSX.VeLogo & JSXBase.HTMLAttributes<HTMLVeLogoElement>;
            "ve-lottie-clip": LocalJSX.VeLottieClip & JSXBase.HTMLAttributes<HTMLVeLottieClipElement>;
            "ve-media-card": LocalJSX.VeMediaCard & JSXBase.HTMLAttributes<HTMLVeMediaCardElement>;
            "ve-media-panel-container": LocalJSX.VeMediaPanelContainer & JSXBase.HTMLAttributes<HTMLVeMediaPanelContainerElement>;
            "ve-missing-configuration-layout": LocalJSX.VeMissingConfigurationLayout & JSXBase.HTMLAttributes<HTMLVeMissingConfigurationLayoutElement>;
            "ve-modal": LocalJSX.VeModal & JSXBase.HTMLAttributes<HTMLVeModalElement>;
            "ve-navbar": LocalJSX.VeNavbar & JSXBase.HTMLAttributes<HTMLVeNavbarElement>;
            "ve-no-subtitles-section": LocalJSX.VeNoSubtitlesSection & JSXBase.HTMLAttributes<HTMLVeNoSubtitlesSectionElement>;
            "ve-option": LocalJSX.VeOption & JSXBase.HTMLAttributes<HTMLVeOptionElement>;
            "ve-panel": LocalJSX.VePanel & JSXBase.HTMLAttributes<HTMLVePanelElement>;
            "ve-panel-grid-list-section": LocalJSX.VePanelGridListSection & JSXBase.HTMLAttributes<HTMLVePanelGridListSectionElement>;
            "ve-paper": LocalJSX.VePaper & JSXBase.HTMLAttributes<HTMLVePaperElement>;
            "ve-placeholder-panel-card": LocalJSX.VePlaceholderPanelCard & JSXBase.HTMLAttributes<HTMLVePlaceholderPanelCardElement>;
            "ve-playhead": LocalJSX.VePlayhead & JSXBase.HTMLAttributes<HTMLVePlayheadElement>;
            "ve-portal": LocalJSX.VePortal & JSXBase.HTMLAttributes<HTMLVePortalElement>;
            "ve-range": LocalJSX.VeRange & JSXBase.HTMLAttributes<HTMLVeRangeElement>;
            "ve-rendering-layout": LocalJSX.VeRenderingLayout & JSXBase.HTMLAttributes<HTMLVeRenderingLayoutElement>;
            "ve-searchbar": LocalJSX.VeSearchbar & JSXBase.HTMLAttributes<HTMLVeSearchbarElement>;
            "ve-select": LocalJSX.VeSelect & JSXBase.HTMLAttributes<HTMLVeSelectElement>;
            "ve-shape-clip": LocalJSX.VeShapeClip & JSXBase.HTMLAttributes<HTMLVeShapeClipElement>;
            "ve-sidebar": LocalJSX.VeSidebar & JSXBase.HTMLAttributes<HTMLVeSidebarElement>;
            "ve-stock-panel-container": LocalJSX.VeStockPanelContainer & JSXBase.HTMLAttributes<HTMLVeStockPanelContainerElement>;
            "ve-subtitle-row": LocalJSX.VeSubtitleRow & JSXBase.HTMLAttributes<HTMLVeSubtitleRowElement>;
            "ve-subtitle-row-divider": LocalJSX.VeSubtitleRowDivider & JSXBase.HTMLAttributes<HTMLVeSubtitleRowDividerElement>;
            "ve-subtitles-clip": LocalJSX.VeSubtitlesClip & JSXBase.HTMLAttributes<HTMLVeSubtitlesClipElement>;
            "ve-subtitles-panel-container": LocalJSX.VeSubtitlesPanelContainer & JSXBase.HTMLAttributes<HTMLVeSubtitlesPanelContainerElement>;
            "ve-subtitles-styles-container": LocalJSX.VeSubtitlesStylesContainer & JSXBase.HTMLAttributes<HTMLVeSubtitlesStylesContainerElement>;
            "ve-tabs": LocalJSX.VeTabs & JSXBase.HTMLAttributes<HTMLVeTabsElement>;
            "ve-text-clip": LocalJSX.VeTextClip & JSXBase.HTMLAttributes<HTMLVeTextClipElement>;
            "ve-text-panel-container": LocalJSX.VeTextPanelContainer & JSXBase.HTMLAttributes<HTMLVeTextPanelContainerElement>;
            "ve-textarea": LocalJSX.VeTextarea & JSXBase.HTMLAttributes<HTMLVeTextareaElement>;
            "ve-timeline": LocalJSX.VeTimeline & JSXBase.HTMLAttributes<HTMLVeTimelineElement>;
            "ve-track": LocalJSX.VeTrack & JSXBase.HTMLAttributes<HTMLVeTrackElement>;
            "ve-track-divider": LocalJSX.VeTrackDivider & JSXBase.HTMLAttributes<HTMLVeTrackDividerElement>;
            "ve-transition": LocalJSX.VeTransition & JSXBase.HTMLAttributes<HTMLVeTransitionElement>;
            "ve-transitions-panel-container": LocalJSX.VeTransitionsPanelContainer & JSXBase.HTMLAttributes<HTMLVeTransitionsPanelContainerElement>;
            "ve-video-clip": LocalJSX.VeVideoClip & JSXBase.HTMLAttributes<HTMLVeVideoClipElement>;
        }
    }
}
